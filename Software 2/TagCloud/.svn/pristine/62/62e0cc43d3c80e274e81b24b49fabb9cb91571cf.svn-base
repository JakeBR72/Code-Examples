import java.util.Comparator;

import components.map.Map;
import components.map.Map.Pair;
import components.map.Map1L;
import components.queue.Queue;
import components.queue.Queue1L;
import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.sortingmachine.SortingMachine;

/**
 * Put a short phrase describing the program here.
 *
 * @author Taha
 * @author Jacob Ruth
 * @author Gautham Sivakumar
 *
 */
public final class TagCloud {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private TagCloud() {
    }

    /**
     * @param in
     * @return Queue with all words
     */

    public static Queue<String> addWordsToQueue(SimpleReader in) {
        Queue<String> words = new Queue1L<String>();
        while (!in.atEOS()) {
            String line = in.nextLine().toLowerCase();
            String[] explode = line.split(
                    "\t|\n|\r|,|-|\\.|!|\\?| |\\[|\\]|'|;|:|/|\\(|\\)|`");
            int size = explode.length;
            for (int i = 0; i < size; i++) {
                String individualWord = explode[i];
                words.enqueue(individualWord);
            }
        }
        return words;
    }

    /**
     *
     * @param wordQueue
     * @return Mapped elements with word count
     */

    public static Map<String, Integer> addWordsToMapWithCount(
            Queue<String> wordQueue) {
        assert wordQueue != null;
        Map<String, Integer> mappedElements = new Map1L<String, Integer>();
        while (wordQueue.length() > 0) {
            String individualWord = wordQueue.dequeue();
            if (mappedElements.hasKey(individualWord)) {
                Map.Pair<String, Integer> pair = mappedElements
                        .remove(individualWord);
                Integer count = pair.value();
                count++; // count is incremented
                mappedElements.add(individualWord, count);
            } else {
                Integer count = Integer.valueOf(1);
                mappedElements.add(individualWord, count);
            }
        }
        return mappedElements;
    }

    public static SortingMachine<Map.Pair<String, Integer>> sort(
            int limitnumber, Map<String, Integer> map, Queue<String> queue) {

        return null;
    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();
        /*
         * Put your main program code here
         */
        out.println("Please input the file name. (.txt)");
        String inputFile = in.nextLine();
        SimpleReader readFile = new SimpleReader1L(inputFile);

        out.println("Please enter the output file name. (.html)");
        //String outputFile = in.nextLine();

        out.println("Please enter the word count (INT)");
        //int wordCount = in.nextInteger();

        // Add all words to Queue
        Queue<String> wordQueue = addWordsToQueue(readFile);

        Map<String, Integer> resultedMap = addWordsToMapWithCount(wordQueue);
        out.println(resultedMap);
        /*
         * Close input and output streams
         */

        in.close();
        out.close();
    }

    /*
     * Comparators
     */

    private static class Alphebatize
            implements Comparator<Map.Pair<String, Integer>> {

        @Override
        public int compare(Pair<String, Integer> o1, Pair<String, Integer> o2) {
            // TODO Auto-generated method stub
            String wordOne = o1.key();
            String wordTwo = o2.key();
            if (wordOne.compareTo(wordTwo) < 0) {
                return -1;
            } else {
                return 1;
            }
        }
    }

    private static class Numerator
            implements Comparator<Map.Pair<String, Integer>> {

        @Override
        public int compare(Pair<String, Integer> o1, Pair<String, Integer> o2) {
            // TODO Auto-generated method stub
            Integer i1 = o1.value();
            Integer i2 = o2.value();
            if (i1 > i2) {

                return -1;

            } else if (i1 < i2) {

                return 1;

            } else {

                return 0;

            }
        }

    }

}
