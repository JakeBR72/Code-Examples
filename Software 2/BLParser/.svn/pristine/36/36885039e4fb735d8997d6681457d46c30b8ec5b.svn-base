import components.map.Map;
import components.program.Program;
import components.program.Program1;
import components.queue.Queue;
import components.set.Set;
import components.set.Set1L;
import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.statement.Statement;
import components.statement.Statement1;
import components.utilities.Reporter;
import components.utilities.Tokenizer;

/**
 * Layered implementation of secondary method {@code parse} for {@code Program}.
 *
 * @author Gautham Sivakumar, Jacob Ruth, Taha Topiwala
 *
 */
public final class Program1Parse1 extends Program1 {

    /*
     * Private members --------------------------------------------------------
     */

    /**
     * Parses a single BL instruction from {@code tokens} returning the
     * instruction name as the value of the function and the body of the
     * instruction in {@code body}.
     *
     * @param tokens
     *            the input tokens
     * @param body
     *            the instruction body
     * @return the instruction name
     * @replaces body
     * @updates tokens
     * @requires [<"INSTRUCTION"> is a proper prefix of tokens]
     * @ensures
     *
     *          <pre>
     * if [an instruction string is a proper prefix of #tokens] then
     *  parseInstruction = [name of instruction at start of #tokens]  and
     *  body = [Statement corresponding to statement string of body of
     *          instruction at start of #tokens]  and
     *  #tokens = [instruction string at start of #tokens] * tokens
     * else
     *  [reports an appropriate error message to the console and terminates client]
     *          </pre>
     */
    private static String parseInstruction(Queue<String> tokens,
            Statement body) {
        assert tokens != null : "Violation of: tokens is not null";
        assert body != null : "Violation of: body is not null";
        assert tokens.length() > 0 && tokens.front().equals("INSTRUCTION") : ""
                + "Violation of: <\"INSTRUCTION\"> is proper prefix of tokens";

        tokens.dequeue();
        String parseInstruction = tokens.dequeue();

        Reporter.assertElseFatalError(Tokenizer.isIdentifier(parseInstruction),
                "Instruction name is not a valid identifier");
        Reporter.assertElseFatalError(tokens.dequeue().equals("IS"),
                "Expected \'IS\' after INSTRUCTION identifier");

        body.parseBlock(tokens);

        Reporter.assertElseFatalError(tokens.dequeue().equals("END"),
                "Expected \'END\' at end of instruction");

        String endName = tokens.dequeue();

        Reporter.assertElseFatalError(parseInstruction.equals(endName),
                "The identifier at the end of each new instruction definition must be the same as the identifier at the beginning of the definition.");

        return parseInstruction;
    }

    /*
     * Constructors -----------------------------------------------------------
     */

    /**
     * No-argument constructor.
     */
    public Program1Parse1() {
        super();
    }

    /*
     * Public methods ---------------------------------------------------------
     */

    @Override
    public void parse(SimpleReader in) {
        assert in != null : "Violation of: in is not null";
        assert in.isOpen() : "Violation of: in.is_open";
        Queue<String> tokens = Tokenizer.tokens(in);
        this.parse(tokens);
    }

    @Override
    public void parse(Queue<String> tokens) {
        assert tokens != null : "Violation of: tokens is not null";
        assert tokens.length() > 0 : ""
                + "Violation of: Tokenizer.END_OF_INPUT is a suffix of tokens";

        Reporter.assertElseFatalError(tokens.dequeue().equals("PROGRAM"),
                "Expected \'PROGRAM\' at beginning of file");

        String programName = tokens.dequeue();
        this.replaceName(programName);

        Reporter.assertElseFatalError(Tokenizer.isIdentifier(programName),
                "Program name is not a valid identifier");
        Reporter.assertElseFatalError(tokens.dequeue().equals("IS"),
                "Expected \'IS\' after PROGRAM identifier");

        Map<String, Statement> context = this.newContext();
        Set<String> namesOfInstructions = new Set1L<String>();
        Set<String> primitiveInstructions = new Set1L<String>();
        primitiveInstructions.add("move");
        primitiveInstructions.add("turnleft");
        primitiveInstructions.add("turnright");
        primitiveInstructions.add("infect");
        primitiveInstructions.add("skip");
        Reporter.assertElseFatalError(
                tokens.front().equals("INSTRUCTION")
                        || tokens.dequeue().equals("BEGIN"),
                "Expected \'INSTRUCTION or BEGIN\' at beginning of tokens");

        while (tokens.front().equals("INSTRUCTION")) {
            Statement s = new Statement1();
            String instructionName = parseInstruction(tokens, s);

            Reporter.assertElseFatalError(
                    !primitiveInstructions.contains(instructionName),
                    "The name of each new user-defined instruction must not be the name of one of the primitive instructions, i.e., move, turnleft, turnright, infect, or skip.");

            Reporter.assertElseFatalError(
                    !namesOfInstructions.contains(instructionName),
                    "The name of each new user-defined instruction must be unique, i.e., there cannot be two user-defined instructions with the same name.");

            context.add(instructionName, s);
            namesOfInstructions.add(instructionName);
        }
        tokens.dequeue();
        this.replaceContext(context);
        Statement body = this.newBody();
        body.parseBlock(tokens);
        this.replaceBody(body);

        Reporter.assertElseFatalError(tokens.dequeue().equals("END"),
                "Expected \'END\' after body of BEGIN");

        String endName = tokens.dequeue();

        Reporter.assertElseFatalError(programName.equals(endName),
                "The identifier at the end of each new instruction definition must be the same as the identifier at the beginning of the definition.");
        Reporter.assertElseFatalError(
                tokens.front().equals("### END OF INPUT ###"),
                "The file must end with ### END OF INPUT ##");

    }

    /*
     * Main test method -------------------------------------------------------
     */

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();
        /*
         * Get input file name
         */
        out.print("Enter valid BL program file name: ");
        String fileName = in.nextLine();
        /*
         * Parse input file
         */
        out.println("*** Parsing input file ***");
        Program p = new Program1Parse1();
        SimpleReader file = new SimpleReader1L(fileName);
        Queue<String> tokens = Tokenizer.tokens(file);
        file.close();
        p.parse(tokens);
        /*
         * Pretty print the program
         */
        out.println("*** Pretty print of parsed program ***");
        p.prettyPrint(out);

        in.close();
        out.close();
    }

}
