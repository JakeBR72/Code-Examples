import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * @author Jacob Ruth
 *
 */
public final class RSSReader {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSReader() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body> <h1>the page title inside a link to the <channel> link<h1>
     * <p>
     * the channel description
     * </p>
     * <table>
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";
        XMLTree channelTree = channel;
        SimpleWriter html = out;
        html.println("<html>\n<head>\n<title>");
        //check for title
        if (getChildElement(channelTree, "title") != -1) {
            html.println(channelTree
                    .child(getChildElement(channelTree, "title")).child(0)
                    .label());
        } else {
            html.println("No title available");
        }
        html.println("</title>\n</head>\n<body>");
        //check for link
        if (getChildElement(channelTree, "link") != -1) {
            html.print("<h1><a href=\"");
            html.print(channelTree.child(getChildElement(channelTree, "link"))
                    .child(0).label());
            html.print("\">");
        }
        //check for title again
        if (getChildElement(channelTree, "title") != -1) {
            html.print(channelTree.child(getChildElement(channelTree, "title"))
                    .child(0).label());
        } else {
            html.print("No Title Available");
        }
        html.print("</a></h1>\n<p>");
        //check for description
        if (getChildElement(channelTree, "description") != -1
                && channelTree.child(
                        getChildElement(channelTree, "description"))
                        .numberOfChildren() != 0) {
            html.print(channelTree
                    .child(getChildElement(channelTree, "description"))
                    .child(0).label());

        } else {
            html.print("No description available");
        }
        html.println("</p>");
        html.print("<table border=\"1\">\n<tr>\n<th>Date</th>\n<th>Source</th"
                + ">\n<th>News</th>\n</tr>");
    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * [</table> </body> </html>]
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";
        SimpleWriter html = out;
        html.print("\n</table>\n</body>\n</html>");

    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        int count = 0;
        int returnValue = -1;
        XMLTree tree = xml;
        String name = tag;
        while (count < tree.numberOfChildren()) {
            if (tree.child(count).label().equals(name)) {
                returnValue = count;
                count = tree.numberOfChildren();
            }
            count++;
        }
        return returnValue;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires <pre>
     * [the label of the root of item is an <item> tag] and out.is_open
     * </pre>
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
        + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        XMLTree parseItem = item;
        SimpleWriter html = out;
        html.print("\n<tr>\n<td>");
        //check for <pubDate>
        if (getChildElement(parseItem, "pubDate") >= 0) {
            html.print(parseItem.child(getChildElement(parseItem, "pubDate"))
                    .child(0).label());
        } else {
            html.print("No Publication Date");
        }
        html.print("</td>\n<td>");
        //check for <source>
        if (getChildElement(parseItem, "source") >= 0) {
            html.print("<a href=\"");
            html.print(parseItem.child(getChildElement(parseItem, "source"))
                    .attributeValue("url"));
            html.print("\"/>");
            html.print(parseItem.child(getChildElement(parseItem, "source"))
                    .child(0).label());
            html.print("</a>");
        } else {
            html.print("No source available");
        }
        html.print("</td>\n<td><a href=\"");
        //check for link
        if (getChildElement(parseItem, "link") >= 0) {
            html.print(parseItem.child(getChildElement(parseItem, "link"))
                    .child(0).label());
        }
        html.print("\">");
        //check for title/description
        if (getChildElement(parseItem, "title") >= 0) {
            html.print(parseItem.child(getChildElement(parseItem, "title"))
                    .child(0).label());
        } else if (getChildElement(parseItem, "description") >= 0) {
            html.print(parseItem
                    .child(getChildElement(parseItem, "description")).child(0)
                    .label());
        } else {
            html.print("No title or description available");
        }
        html.print("</td>\n</tr>");

    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();
        out.println("Please enter a valid RSS url: ");
        XMLTree rss = new XMLTree1(in.nextLine());
        while (!rss.attributeValue("version").equals("2.0")) {
            out.println("Please enter a valid rss url: ");
            rss = new XMLTree1(in.nextLine());
        }

        XMLTree channel = rss.child(getChildElement(rss, "channel"));
        out.println("Please enter a filename to export to:");
        SimpleWriter html = new SimpleWriter1L(in.nextLine());
        outputHeader(channel, html);
        int count = getChildElement(channel, "item");
        //continue while there are still children to process and only process
        //them if they are a <item>
        while (count < channel.numberOfChildren()
                && channel.child(count).label() == "item") {
            processItem(channel.child(count), html);
            count++;
        }
        outputFooter(html);
        html.close();
        in.close();
        out.close();
    }
}